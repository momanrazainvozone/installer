# Configuration file for https://circleci.com/gh/angular/angular-cli

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  devinfra: angular/dev-infra@1.0.7

parameters:
  snapshot_changed:
    type: boolean
    default: false

# Variables

## IMPORTANT
# Windows needs its own cache key because binaries in node_modules are different.
# See https://circleci.com/docs/2.0/caching/#restoring-cache for how prefixes work in CircleCI.
var_1: &cache_key v1-angular_devkit-14.20-{{ checksum "yarn.lock" }}
var_1_win: &cache_key_win v1-angular_devkit-win-16.13-{{ checksum "yarn.lock" }}
var_3: &default_nodeversion '14.20'
var_3_major: &default_nodeversion_major '14'
# The major version of node toolchains. See tools/toolchain_info.bzl
# NOTE: entries in this array may be repeated elsewhere in the file, find them before adding more
var_3_all_major: &all_nodeversion_major ['14', '16']
# Workspace initially persisted by the `setup` job, and then enhanced by `setup-and-build-win`.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
# https://circleci.com/blog/deep-diving-into-circleci-workspaces/
var_4: &workspace_location .
# Filter to only release branches on a given job.
var_5: &only_release_branches
  filters:
    branches:
      only:
        - main
        - /\d+\.\d+\.x/

var_6: &only_pull_requests
  filters:
    branches:
      only:
        - /pull\/\d+/

var_7: &all_e2e_subsets ['npm', 'esbuild', 'yarn']

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  action-executor:
    parameters:
      nodeversion:
        type: string
        default: *default_nodeversion
    docker:
      - image: cimg/node:<< parameters.nodeversion >>
    working_directory: ~/ng
    resource_class: small

  windows-executor:
    # Same as https://circleci.com/orbs/registry/orb/circleci/windows, but named.
    working_directory: ~/ng
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass
    machine:
      # Contents of this image:
      # https://circleci.com/docs/2.0/hello-world-windows/#software-pre-installed-in-the-windows-image
      image: windows-server-2019-vs2019:stable

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  fail_fast:
    steps:
      - run:
          name: 'Cancel workflow on fail'
          shell: bash
          when: on_fail
          command: |
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${CIRCLE_TOKEN}"

  initialize_env:
    steps:
      - run:
          name: Initialize Environment
          command: ./.circleci/env.sh

  rebase_pr:
    steps:
      - devinfra/rebase-pr-on-target-branch:
          base_revision: << pipeline.git.base_revision >>
          head_revision: << pipeline.git.revision >>

  rebase_pr_win:
    steps:
      - devinfra/rebase-pr-on-target-branch:
          base_revision: << pipeline.git.base_revision >>
          head_revision: << pipeline.git.revision >>
          # Use `bash.exe` as Shell because the CircleCI-orb command is an
          # included Bash script and expects Bash as shell.
          shell: bash.exe

  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: *workspace_location
  setup_windows:
    steps:
      - initialize_env
      - run: nvm install 16.13
      - run: nvm use 16.13
      - run: npm install -g yarn@1.22.10
      - run: node --version
      - run: yarn --version

  setup_bazel_rbe:
    parameters:
      key:
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
    steps:
      - devinfra/setup-bazel-remote-exec:
          bazelrc: ./.bazelrc.user

  install_python:
    steps:
      - run:
          name: 'Install Python 2'
          command: |
            sudo apt-get update > /dev/null 2>&1
            sudo apt-get install -y python
            python --version

# Job definitions
jobs:
  setup:
    executor: action-executor
    resource_class: medium
    steps:
      - checkout
      - rebase_pr
      - initialize_env
      - restore_cache:
          keys:
            - *cache_key
      - run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./*
      - save_cache:
          key: *cache_key
          paths:
            - ~/.cache/yarn

  lint:
    executor: action-executor
    steps:
      - custom_attach_workspace
      - run: yarn lint

  validate:
    executor: action-executor
    steps:
      - custom_attach_workspace
      - run:
          name: Validate Commit Messages
          command: >
            if [[ -n "${CIRCLE_PR_NUMBER}" ]]; then
              yarn ng-dev commit-message validate-range <<pipeline.git.base_revision>> <<pipeline.git.revision>>
            else
              echo "This build is not over a PR, nothing to do."
            fi
      - run:
          name: Validate Code Formatting
          command: yarn -s ng-dev format changed <<pipeline.git.base_revision>> --check
      - run:
          name: Validate NgBot Configuration
          command: yarn ng-dev ngbot verify
      - run:
          name: Validate Circular Dependencies
          command: yarn ts-circular-deps:check
      - run: yarn -s admin validate
      - run: yarn -s check-tooling-setup

  e2e-tests:
    parameters:
      nodeversion:
        type: string
        default: *default_nodeversion
      snapshots:
        type: boolean
        default: false
      subset:
        type: enum
        enum: *all_e2e_subsets
        default: 'npm'
    executor:
      name: action-executor
      nodeversion: << parameters.nodeversion >>
    parallelism: 8
    resource_class: large
    steps:
      - custom_attach_workspace
      - browser-tools/install-chrome
      - initialize_env
      - run: mkdir /mnt/ramdisk/e2e
      - when:
          condition:
            equal: ['npm', << parameters.subset >>]
          steps:
            - run:
                name: Execute CLI E2E Tests with NPM
                command: |
                  node ./tests/legacy-cli/run_e2e --nb-shards=${CIRCLE_NODE_TOTAL} --shard=${CIRCLE_NODE_INDEX} <<# parameters.snapshots >>--ng-snapshots<</ parameters.snapshots >> --tmpdir=/mnt/ramdisk/e2e --ignore="tests/misc/browsers.ts"
      - when:
          condition:
            equal: ['esbuild', << parameters.subset >>]
          steps:
            - run:
                name: Execute CLI E2E Tests Subset with Esbuild
                command: |
                  node ./tests/legacy-cli/run_e2e --nb-shards=${CIRCLE_NODE_TOTAL} --shard=${CIRCLE_NODE_INDEX} <<# parameters.snapshots >>--ng-snapshots<</ parameters.snapshots >> --esbuild --tmpdir=/mnt/ramdisk/e2e --glob="{tests/basic/**,tests/build/prod-build.ts,tests/build/relative-sourcemap.ts,tests/build/styles/scss.ts,tests/build/styles/include-paths.ts,tests/commands/add/add-pwa.ts}" --ignore="tests/basic/{environment,rebuild,serve,scripts-array}.ts"
      - when:
          condition:
            equal: ['yarn', << parameters.subset >>]
          steps:
            - run:
                name: Execute CLI E2E Tests Subset with Yarn
                command: |
                  node ./tests/legacy-cli/run_e2e --nb-shards=${CIRCLE_NODE_TOTAL} --shard=${CIRCLE_NODE_INDEX} <<# parameters.snapshots >>--ng-snapshots<</ parameters.snapshots >> --yarn --tmpdir=/mnt/ramdisk/e2e --glob="{tests/basic/**,tests/update/**,tests/commands/add/**}"
      - fail_fast

  test-browsers:
    executor:
      name: action-executor
    resource_class: medium
    steps:
      - custom_attach_workspace
      - initialize_env
      - run:
          name: Initialize Saucelabs
          command: setSecretVar SAUCE_ACCESS_KEY $(echo $SAUCE_ACCESS_KEY | rev)
      - run:
          name: Start Saucelabs Tunnel
          command: ./scripts/saucelabs/start-tunnel.sh
          background: true
        # Waits for the Saucelabs tunnel to be ready. This ensures that we don't run tests
        # too early without Saucelabs not being ready.
      - run: ./scripts/saucelabs/wait-for-tunnel.sh
      - run: node ./tests/legacy-cli/run_e2e --glob="tests/misc/browsers.ts"
      - run: ./scripts/saucelabs/stop-tunnel.sh
      - fail_fast

  build:
    executor: action-executor
    steps:
      - custom_attach_workspace
      - run: yarn build
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - dist/_*.tgz

  build-bazel-e2e:
    executor: action-executor
    resource_class: medium
    steps:
      - custom_attach_workspace
      - run: yarn bazel build //tests/legacy-cli/...

  unit-test:
    executor: action-executor
    resource_class: xlarge
    parameters:
      nodeversion:
        type: string
        default: *default_nodeversion_major
    steps:
      - custom_attach_workspace
      - browser-tools/install-chrome
      - setup_bazel_rbe
      - run: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
      - when:
          # The default nodeversion runs all *excluding* other versions
          condition:
            equal: [*default_nodeversion_major, << parameters.nodeversion >>]
          steps:
            - run:
                command: yarn bazel test --test_tag_filters=-node16,-node<< parameters.nodeversion >>-broken //packages/...
                # This timeout provides time for the actual tests to timeout and report status
                # instead of CircleCI stopping the job without test failure information.
                no_output_timeout: 40m
      - when:
          # Non-default nodeversion runs only that specific nodeversion
          condition:
            not:
              equal: [*default_nodeversion_major, << parameters.nodeversion >>]
          steps:
            - run:
                command: yarn bazel test --test_tag_filters=node<< parameters.nodeversion >>,-node<< parameters.nodeversion >>-broken //packages/...
                # This timeout provides time for the actual tests to timeout and report status
                # instead of CircleCI stopping the job without test failure information.
                no_output_timeout: 40m
      - fail_fast

  snapshot_publish:
    executor: action-executor
    resource_class: medium
    steps:
      - custom_attach_workspace
      - install_python
      - run:
          name: Decrypt Credentials
          # Note: when changing the image, you might have to re-encrypt the credentials with a
          # matching version of openssl.
          # See https://stackoverflow.com/a/43847627/2116927 for more info.
          command: |
            openssl aes-256-cbc -d -in .circleci/github_token -k "${KEY}" -out ~/github_token -md md5
      - run:
          name: Deployment to Snapshot
          command: |
            yarn admin snapshots --verbose --githubTokenFile=${HOME}/github_token
      - fail_fast

  publish_artifacts:
    executor: action-executor
    environment:
    steps:
      - custom_attach_workspace
      - run:
          name: Create artifacts for packages
          command: yarn ng-dev release build
      - run:
          name: Copy tarballs to folder
          command: |
            mkdir -p dist/artifacts/
            cp dist/*.tgz dist/artifacts/
      - store_artifacts:
          path: dist/artifacts/
          destination: angular

  # Windows jobs
  e2e-cli-win:
    executor: windows-executor
    parallelism: 16
    steps:
      - checkout
      - rebase_pr_win
      - setup_windows
      - restore_cache:
          keys:
            - *cache_key_win
      - run:
          # We use Arsenal Image Mounter (AIM) instead of ImDisk because of: https://github.com/nodejs/node/issues/6861
          # Useful resources for AIM: http://reboot.pro/index.php?showtopic=22068
          name: 'Arsenal Image Mounter (RAM Disk)'
          command: |
            pwsh ./.circleci/win-ram-disk.ps1
      - run: yarn install --frozen-lockfile --cache-folder ../.cache/yarn
      - save_cache:
          key: *cache_key_win
          paths:
            - ~/.cache/yarn
            # Path where Arsenal Image Mounter files are downloaded.
            # Must match path in .circleci/win-ram-disk.ps1
            - ./aim
      # Build the npm packages for the e2e tests
      - run: yarn build
      # Run partial e2e suite on PRs only. Release branches will run the full e2e suite.
      - run:
          name: Execute E2E Tests
          command: |
            mkdir X:/ramdisk/e2e-main
            node tests\legacy-cli\run_e2e.js --nb-shards=$env:CIRCLE_NODE_TOTAL --shard=$env:CIRCLE_NODE_INDEX --tmpdir=X:/ramdisk/e2e-main --ignore="tests/misc/browsers.ts"
      - fail_fast

workflows:
  version: 2
  default_workflow:
    jobs:
      # Linux jobs
      - setup
      - lint:
          requires:
            - setup
      - validate:
          requires:
            - setup
      - build:
          requires:
            - setup

      - test-browsers:
          requires:
            - build

      - e2e-tests:
          name: e2e-cli-<< matrix.subset >>
          nodeversion: '14.20'
          matrix:
            parameters:
              subset: *all_e2e_subsets
          filters:
            branches:
              ignore:
                - main
                - /\d+\.\d+\.x/
          requires:
            - build

      - e2e-tests:
          name: e2e-cli-node-<<matrix.nodeversion>>-<< matrix.subset >>
          matrix:
            alias: e2e-cli
            parameters:
              nodeversion: ['14.20', '16.13', '18.10']
              subset: *all_e2e_subsets
          requires:
            - build
          <<: *only_release_branches

      - e2e-tests:
          name: e2e-snapshots-<< matrix.subset >>
          nodeversion: '16.13'
          matrix:
            parameters:
              subset: *all_e2e_subsets
          snapshots: true
          pre-steps:
            - when:
                condition:
                  and:
                    - not:
                        equal: [main, << pipeline.git.branch >>]
                    - not: << pipeline.parameters.snapshot_changed >>
                steps:
                  # Don't run snapshot E2E's unless it's on the main branch or the snapshots file has been updated.
                  - run: circleci-agent step halt
          requires:
            - build
          filters:
            branches:
              only:
                - main
                # This is needed to run this steps on Renovate PRs that amend the snapshots package.json
                - /^pull\/.*/

      # Bazel jobs
      # These jobs only really depend on Setup, but the build job is very quick to run (~35s) and
      # will catch any build errors before proceeding to the more lengthy and resource intensive
      # Bazel jobs.
      - unit-test:
          name: test-node<< matrix.nodeversion >>
          matrix:
            parameters:
              nodeversion: *all_nodeversion_major
          requires:
            - build

      # Compile the e2e tests with bazel to ensure the non-runtime typescript
      # compilation completes succesfully.
      - build-bazel-e2e:
          requires:
            - build

      # Windows jobs
      - e2e-cli-win

      # Publish jobs
      - snapshot_publish:
          <<: *only_release_branches
          requires:
            - setup
            - e2e-cli

      - publish_artifacts:
          <<: *only_pull_requests
          requires:
            - build
